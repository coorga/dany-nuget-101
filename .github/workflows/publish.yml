name: 🧱 Build & Publish NuGet Packages

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  buildConfiguration: Release
  artifactsFolder: ./artifacts
  version: 1.1.${{ github.run_number }}
  # Feeds
  nugetFeedGitHub: https://nuget.pkg.github.com/coorga/index.json

jobs:
  build:
    runs-on: ubuntu-latest
    
    permissions:
      contents: read
      packages: write

    steps:
      # --- Repository Checkout ---
      - name: 🧭 Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # 🔗 Wichtig für SourceLink (vollständige Git-Historie)

      # --- .NET SDK Setup ---
      - name: 🧩 Setup .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 9.0.x

      # --- NuGet Sources ---
      - name: 🔧 Configure NuGet sources
        shell: pwsh
        run: dotnet nuget add source --username ${{ github.actor }} --password ${{ secrets.GH_PACKAGES_TOKEN }} --store-password-in-clear-text --name github "https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json"

      # --- Artifacts Cleanup ---
      - name: 🧹 Clean artifacts folder
        shell: pwsh
        run: |
          if (Test-Path $env:artifactsFolder) { 
            Remove-Item $env:artifactsFolder -Recurse -Force 
          }
          New-Item -ItemType Directory -Force -Path $env:artifactsFolder | Out-Null

      # --- Build, Pack & Push ---
      - name: 🏗️ Build, Pack & Push All Projects
        shell: pwsh
        env:
          NUGET_API_KEY: ${{ secrets.GH_PACKAGES_TOKEN }}
        run: |
          # ============================================
          # Hilfsfunktionen
          # ============================================
          
          function BuildAndPack {
              param([string]$path, [string]$name)
          
              Write-Host "##[section]🧱 Building and Packing: $name" -ForegroundColor Cyan
          
              # Restore mit Force (kein Cache)
              Write-Host "  📦 Restoring dependencies..." -ForegroundColor Gray
              dotnet restore $path --no-cache --force
          
              # Build
              # Hinweis: ContinuousIntegrationBuild wird automatisch durch 
              # Directory.Build.props gesetzt (GITHUB_ACTIONS=true)
              Write-Host "  🔨 Building..." -ForegroundColor Gray
              dotnet build $path `
                --configuration $env:buildConfiguration `
                --no-restore
          
              # Pack
              # Hinweis: Alle SourceLink-Properties kommen aus Directory.Build.props
              # Nur PackageVersion muss explizit gesetzt werden
              Write-Host "  📦 Packing..." -ForegroundColor Gray
              dotnet pack $path `
                --configuration $env:buildConfiguration `
                --no-build `
                --output $env:artifactsFolder `
                "/p:PackageVersion=$env:version"
          
          
              Write-Host "  ✅ Done: $name" -ForegroundColor Green
              Write-Host ""
          }

          function PushPackage {
              param([string]$packagePath)
          
              $packageName = [System.IO.Path]::GetFileNameWithoutExtension($packagePath)
          
              Write-Host "##[section]🚀 Pushing: $packageName" -ForegroundColor Cyan
          
              dotnet nuget push $packagePath --source github --api-key $env:NUGET_API_KEY --skip-duplicate
          
              Write-Host "  ✅ Pushed: $packageName" -ForegroundColor Green
              Write-Host ""
          }

          # ============================================
          # Build-Reihenfolge (Abhängigkeiten beachten)
          # ============================================
          
          Write-Host "##[group]📦 Building Packages" -ForegroundColor Yellow
          
          BuildAndPack "NuGetSample/MyCalculator/MyCalculator.csproj" "MyCalculator"
          
          Write-Host "##[endgroup]"

          # ============================================
          # Push alle .nupkg Pakete (nicht .snupkg)
          # ============================================
          
          Write-Host "##[group]🚀 Pushing Packages to GitHub" -ForegroundColor Yellow
          
          Get-ChildItem $env:artifactsFolder -Filter "*.nupkg" -Exclude "*.snupkg" | ForEach-Object {
            PushPackage $_.FullName
          }
          
          Write-Host "##[endgroup]"
          
          # ============================================
          # Push alle .snupkg Symbolpakete
          # ============================================
          
          Write-Host "##[group]🔍 Pushing Symbol Packages to GitHub" -ForegroundColor Yellow
          
          Get-ChildItem $env:artifactsFolder -Filter "*.snupkg" | ForEach-Object {
            PushPackage $_.FullName
          }
          
          Write-Host "##[endgroup]"

      # --- Upload artifacts ---
      - name: 📦 Upload NuGet artifacts
        uses: actions/upload-artifact@v4
        with:
          name: nuget-packages-${{ env.version }}
          path: ${{ env.artifactsFolder }}
          retention-days: 30
